{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing C:/Users/Aparna/Desktop/ip/proj images/roi images\\image1.jpg..\n",
      "Number of Contours found = 1\n",
      "Processing C:/Users/Aparna/Desktop/ip/proj images/roi images\\image2.jpg..\n",
      "Number of Contours found = 1\n",
      "Writing to the file\n",
      "Processing C:/Users/Aparna/Desktop/ip/proj images/roi images\\image3.jpg..\n",
      "Number of Contours found = 1\n",
      "Writing to the file\n",
      "Processing C:/Users/Aparna/Desktop/ip/proj images/roi images\\image4.jpg..\n",
      "Number of Contours found = 1\n",
      "Writing to the file\n",
      "Processing C:/Users/Aparna/Desktop/ip/proj images/roi images\\image5.jpg..\n",
      "Number of Contours found = 1\n",
      "Writing to the file\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import csv\n",
    "from glob import glob\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt  \n",
    "# To display in external window \n",
    "images = 'C:/Users/Aparna/Desktop/ip/proj images/roi images/*.jpg'\n",
    "img_names = glob(images) \n",
    "for file in img_names:\n",
    "    print(\"Processing %s..\"%file,)\n",
    "    image = cv2.imread(file) \n",
    "    # Loading the image \n",
    "    #Resizing and cropping\n",
    "    half = cv2.resize(image, (0, 0), fx = 0.3, fy = 0.3) \n",
    "    crop = half[240:450, 370:430]\n",
    "#     cv2.imshow('Crop',crop)\n",
    "#     cv2.waitKey(0)\n",
    "    lower_range=np.array([0,80,30],dtype=np.uint8)\n",
    "    upper_range=np.array([180, 200, 255],dtype=np.uint8)\n",
    "    mask = cv2.inRange(crop,lower_range,upper_range)\n",
    "#     cv2.imshow('Mask',mask)\n",
    "#     cv2.waitKey(0)\n",
    "    #copying the cropped image on the mask layer\n",
    "    masked = cv2.bitwise_and(crop,crop,mask=mask)\n",
    "#     cv2.imshow('Masked',masked)\n",
    "#     cv2.waitKey(0)\n",
    "    gray = cv2.cvtColor(crop,cv2.COLOR_BGR2GRAY)\n",
    "#     noise = cv2.fastNlMeansDenoisingColored(masked,10,10,7,21)  #To remove noises\n",
    "#     cv2.imshow('Denoising',noise)\n",
    "    blurred = cv2.medianBlur(masked,5)\n",
    "    blurred = cv2.cvtColor(blurred,cv2.COLOR_BGR2GRAY)\n",
    "#     cv2.imshow('Blurred',blurred)\n",
    "#     cv2.waitKey(0)\n",
    "    #noise = cv2.fastNlMeansDenoisingColored(blurred,10,10,7,21)  #To remove noises\n",
    "    #cv2.imshow('Denoising',noise)\n",
    "    #cv2.waitKey(0)\n",
    "    #ret, thresh = cv2.threshold(gray, 127, 255, 0)\n",
    "    #thresh_delta = cv2.threshold(gray,30,255, cv2.THRESH_BINARY)[1]\n",
    "    cnts,hierarchy = cv2.findContours(blurred.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)\n",
    "    cnts=sorted(cnts,key=cv2.contourArea,reverse=True)[:1]\n",
    "    print(\"Number of Contours found = \" + str(len(cnts))) \n",
    "    screencnt=0\n",
    "    #values=[]\n",
    "    #creating a zero numpy array\n",
    "    means=np.zeros((1,4))\n",
    "    for values in cnts:\n",
    "        #print(values)\n",
    "        peri=cv2.arcLength(values,True)\n",
    "        approx=cv2.approxPolyDP(values,0.1*peri,True)\n",
    "        area=cv2.contourArea(values)\n",
    "        \n",
    "        #if (area>300 and area<10000):\n",
    "        if len(approx)==4:#to check if the contour has 4 sides\n",
    "            #print(area)\n",
    "            #x,y:co-ordinates of centre,w:width,h:height\n",
    "            x,y,w,h = cv2.boundingRect(values)\n",
    "            #print(x,y,w,h)\n",
    "            orig = crop[(y+3):y+(h-5),(x+2):(x+(w-2))].copy()\n",
    "            cv2.imshow('Image',orig)\n",
    "            #cv2.imshow('Blurred',blurred)\n",
    "            cv2.drawContours(crop,[values],-1,(0,255,0),3)\n",
    "            cv2.imshow('Contours',crop)#contours should be displayed on the cropped image for better understanding\n",
    "            cv2.waitKey(0)\n",
    "            #hsv_frame = cv2.cvtColor(crop,cv2.COLOR_BGR2HSV)\n",
    "            \n",
    "            hsv_orange = cv2.cvtColor(crop,cv2.COLOR_BGR2HSV)\n",
    "            mean = cv2.mean(hsv_orange)\n",
    "            a,b,c,d = mean\n",
    "           \n",
    "            #cv2.imshow('HSV',hsv_orange)\n",
    "            #cv2.waitKey(0)\n",
    "            #cv2.destroyWindow('Orig after finding coordinates')\n",
    "            lab = cv2.cvtColor(crop,cv2.COLOR_BGR2LAB)\n",
    "            mean1 = cv2.mean(lab)\n",
    "            e,f,g,h = mean1\n",
    "            \n",
    "\n",
    "            with open('C:/Users/Aparna/Desktop/ip/csv files/csv1.xlsx','a') as x:\n",
    "                 writer = csv.writer(x)\n",
    "                 print(\"Writing to the file\")\n",
    "                 writer.writerow([])\n",
    "                 writer.writerow([a,b,c,e,f,g,file])\n",
    "                 \n",
    "            #img=cv2.cvtColor(cropped,cv2.COLOR_BGR2LAB)\n",
    "    # cv2.imshow('thresh',thresh_delta)\n",
    "    \n",
    "#     cv2.destroyWindow('Masked')\n",
    "#     cv2.destroyWindow('Mask')\n",
    "    \n",
    "    cv2.destroyWindow('Contour')\n",
    "    cv2.destroyWindow('Denoising')\n",
    "    cv2.destroyWindow('HSV')\n",
    "    cv2.destroyWindow('Crop')\n",
    "    cv2.destroyWindow('Mask')\n",
    "    cv2.destroyWindow('Masked')\n",
    "    cv2.destroyWindow('Blurred')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
